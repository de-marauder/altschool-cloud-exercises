############################################################################
# Deploy a laravel application on a debian server
############################################################################

- hosts: webservers
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    # Update repositories
    - name: Update repository cache
      apt:
        update_cache: true

    # Install Server requirements
    - name: Install Server requirements
      apt:
        name: [ 'apache2', 'git', npm ]
        state: present

    # Install php dependencies
    - name: Installing php dependencies
      apt:
        name: ['lsb-release', 'ca-certificates', 'apt-transport-https', 'software-properties-common', 'gnupg2']
        state: present

    - name: Add php repository to package sources
      shell: echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/sury-php.list

    - name: Import php repository key
      shell:
        cmd: wget -qO - https://packages.sury.org/php/apt.gpg | sudo apt-key add -
        warn: false

    # Update repositories
    - name: Update repository cache
      apt:
        update_cache: true

    - name: Install php
      apt:
        name: ['php']
        state: present

    - name: Install php extensions
      apt:
        name: ['php-cli', 'php-fpm', 'php-json', 'php-mysql', 'php-zip', 'php-gd', 'php-mbstring', 'php-curl', 'php-xml', 'php-bcmath', 'php-json']
        state: present

    # Install and configure database
    - name: Install mariadb
      apt:
        name: ['mariadb-server', 'mariadb-client', 'python3-mysqldb']
        state: present

    - name: Sets the root password
      mysql_user:
        name: root
        password: "{{ db_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Removes all anonymous user accounts
      mysql_user:
        name: ''
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ db_root_password }}"

    - name: Removes the MySQL test database
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ db_root_password }}"

    - name: Create the laravelapp database
      mysql_db:
        name: laravelapp
        state: present
        login_user: root
        login_password: "{{ db_root_password }}"

    # Configure Apache to recognize site
    - name: Import apache configuration file
      template:
        src: "files/app.conf"
        dest: "/etc/apache2/sites-available/{{ http_conf }}"

    # Enable site
    - name: Enable new site
      shell: /usr/sbin/a2ensite "{{ http_conf }}"
      notify: Reload Apache

    - name: Disable default Apache site
      shell: /usr/sbin/a2dissite 000-default.conf
      # when: disable_default
      notify: Reload Apache

    # Clone laravel app from "{{ app_repo_link }}"
    - name: Remove unwanted directories
      command:
        cmd: rm -rf "{{ repo_name }}"
        chdir: /var/www/
        warn: false

    - name: Cloning laravel app from "{{ app_repo_link }}"
      command: git clone "{{ app_repo_link }}"
      args:
        chdir: /var/www/

    # Setup Virtualhost
    - name: Create site directory
      file:
        path: "/var/www/{{ http_host }}"
        owner: admin
        group: www-data
        state: directory
        mode: 0775

    # Move cloned repo into site directory
    - name: Copy cloned repo content to site directory /var/www/"{{ http_host }}"
      command: cp -R . /var/www/"{{ http_host }}"
      args:
        chdir: "/var/www/{{ repo_name }}"

    - name: Delete cloned repo
      command:
        cmd: rm -rf "/var/www/{{repo_name}}"
        warn: false
      args:
        chdir: /var/www

    - name: Assign file permissions
      command: find "/var/www/{{ http_host }}" -type f -exec chmod 664 {} \;

    - name: Assign Directory permissions
      command: find "/var/www/{{ http_host }}" -type d -exec chmod 775 {} \;

    - name: Change group of storage and bootstrap/cache folders
      command:
        cmd: chgrp -R www-data storage bootstrap/cache
        chdir: "/var/www/{{ http_host }}"
        warn: false

    - name: Assign permissions for storage and bootstrap/cache folders and files
      command:
        cmd: chmod -R ug+rwx storage bootstrap/cache
        chdir: "/var/www/{{ http_host }}"
        warn: false

    # Install Composer
    - name: Download Composer installer as composer-setup.php
      command:
        cmd: php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        chdir: "/var/www/{{ http_host }}"

    - name: Verify composer setup hash
      shell:
        cmd: php -r "if (hash_file('sha384', 'composer-setup.php') === '55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
        chdir: "/var/www/{{ http_host }}"
      args:
        executable: /bin/bash

    - name: Run composer setup
      command:
        cmd: php composer-setup.php
        chdir: /var/www/{{ http_host }}

    - name: Unlink composer setup
      command:
        cmd: php -r "unlink('composer-setup.php');"
        chdir: /var/www

    # Add composer to path
    - name: Add composer to path
      command: mv composer.phar /usr/local/bin/composer
      args:
        chdir: /var/www/{{ http_host }}

    # Install application dependencies with composer
    # - name: Installing laravel app dependencies
    #   become: yes
    #   become_user: not_root_user
    #   shell: composer install
    #   args:
    #     executable: /bin/bash
    #     chdir: "/var/www/{{ http_host }}"

    - name: Composer install
      composer:
        command: install
        working_dir: "/var/www/{{ http_host }}"
      environment:
        COMPOSER_NO_INTERACTION: "1"


    - name: Build Application with npm
      command: npm run prod
      args:
        chdir: /var/www/"{{ http_host }}"


  # Handlers
  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      service:
        name: apache2
        state: restarted

    - name: Restart MySQL
      service:
        name: mysql
        state: restarted
